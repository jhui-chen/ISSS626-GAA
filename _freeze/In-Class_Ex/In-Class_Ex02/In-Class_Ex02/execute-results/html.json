{
  "hash": "50b5146898a80309845b79c27e79420a",
  "result": {
    "markdown": "---\ntitle: \"In-Class_Ex02\"\nauthor: \"Chen Jinghui\"\ndate: \"Sep 2 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  message: false #no warning messages go out\n  freeze: true  #will not re-render all items\n---\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"maptools\", repos=\"https://packagemanager.posit.co/cran/2023-10-13\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, raster, spatstat, tmap, tidyverse, maptools)\n```\n:::\n\n\nImporting the spatial data and transforming their coordinate reference system (CRS).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsg_sf <- st_read(dsn = \"C:/jhui-chen/ISSS626-GAA/Hands-on_Ex/Hands-on_Ex02/data\", layer=\"CostalOutline\")%>%\nst_transform(crs = 3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `CostalOutline' from data source \n  `C:\\jhui-chen\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex02\\data' using driver `ESRI Shapefile'\nSimple feature collection with 60 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2663.926 ymin: 16357.98 xmax: 56047.79 ymax: 50244.03\nProjected CRS: SVY21\n```\n:::\n\n```{.r .cell-code}\nst_crs(sg_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nchildcare_sf <- st_read(\"C:/jhui-chen/ISSS626-GAA/Hands-on_Ex/Hands-on_Ex02/data/child-care-services-geojson.geojson\") %>%\nst_transform(childcare_sf, crs = 3414) ##change to svy21 and epsg code to 3414\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `child-care-services-geojson' from data source \n  `C:\\jhui-chen\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex02\\data\\child-care-services-geojson.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1545 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n:::\n\n```{.r .cell-code}\nst_crs(childcare_sf) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n```\n:::\n:::\n\n\nst_union() This function is to dissolve the borders and combine all the polygons (SG regions) together\n\nas.ppp if input data is as sf object, use this. Use sf package.This function is from spatstat This create point object\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchildcare_ppp <- as.ppp(childcare_sf)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in as.ppp.sf(childcare_sf): only first attribute column is used for\nmarks\n```\n:::\n\n```{.r .cell-code}\nchildcare_ppp\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMarked planar point pattern: 1545 points\nmarks are of storage type  'character'\nwindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n```\n:::\n:::\n\n\nas.owin This function is from spatstat This create boundaries for the data\n\n\n::: {.cell}\n\n:::\n\n\nppp Use this if your input data is sp object. Convert generic sp to ppp. If you can, don't use sp. involve two steps.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsg_owin <- as.owin(sg_sf)\nchildcareSG_ppp = childcare_ppp[sg_owin]\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nkde_childcareSG_bw <- density(childcareSG_ppp,\n                              sigma=bw.diggle,\n                              edge=TRUE,\n                           kernel=\"gaussian\")\n```\n:::\n\n\nKernel density estimation this is the spatstat.geom method\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngridded_kde_childcareSG_bw <- as(kde_childcareSG_bw, \"SpatialGridDataFrame\")\nspplot(gridded_kde_childcareSG_bw)\n```\n\n::: {.cell-output-display}\n![](In-Class_Ex02_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nThis ensure monte carlo simulation will not keep changing the values.\n\nSet simulations to 1234, to consistently obtain values\n\n::: {.cell}\n\n```{.r .cell-code}\n#set.seed(1234)\n```\n:::",
    "supporting": [
      "In-Class_Ex02_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}