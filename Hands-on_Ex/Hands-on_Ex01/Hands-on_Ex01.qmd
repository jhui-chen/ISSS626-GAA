---
title: "Hands-on Exercise 1"
author: "Chen Jinghui"
---

Getting Started

Install and launching R packages

The code chunk below uses p_load() of pacman package to check if tidyverse and sf packages are installed in the computer. If they are, then they will be launched into R.

[**1 Geospatial Data Science with R**]{.underline}

Loading packages

```{r}
pacman::p_load(sf, tidyverse, tmap)
```

1.4 Importing Geospatial Data

1.4.1 Importing polygon feature data in shapefile format
```{r}
mpsz = st_read(dsn = "C:/jhui-chen/ISSS626-GAA/Hands-on_Ex/Hands-on_Ex01/data/geospatial",
layer = "MP14_SUBZONE_WEB_PL")

```

1.4.2 Importing polyline feature data in shapefile form
```{r}
cyclingpath = st_read(dsn = "C:/jhui-chen/ISSS626-GAA/Hands-on_Ex/Hands-on_Ex01/data/geospatial",
layer = "CyclingPathGazette")
```

1.4.3 Importing GIS data in kml format
```{r}
preschool = st_read("C:/jhui-chen/ISSS626-GAA/Hands-on_Ex/Hands-on_Ex01/data/geospatial/PreSchoolsLocation.kml")
```

1.5 Checking the Content of A Simple Feature Data Frame

Working with st_geometry(), glimpse() and head()
```{r}
st_geometry(mpsz)

glimpse(mpsz)

head(mpsz, n=5)
```

1.6 Plotting the Geospatial Data

```{r}
plot(mpsz)
```

```{r}
plot(st_geometry(mpsz))
```

```{r}
plot(mpsz["PLN_AREA_N"])
```

1.7 Working with Projection

1.7.1 Assigning EPSG code to a simple feature data frame
EPSG code shown is 9001, which is wrong because correct EPSG code for svy21 should be 3414

```{r}
st_crs(mpsz)
```

Assign correct EPSG code to mpsz data frame and checking that EPSG code.

```{r}
mpsz3414 <- st_set_crs(mpsz, 3414)
st_crs(mpsz3414)
```

1.7.2 Transforming the projection of preschool from wgs84 to svy21
Checking coordinate reference system (CRS) of preschool

```{r}
print(preschool)
```

Transforming the projection of preschool from wgs84 to svy21. 
Checking the CRS

```{r}
preschool3414 <- st_transform(preschool,
crs = 3414)
print(preschool3414)
```

1.8 Importing and Converting An Aspatial Data

1.8.1 Importing the aspatial data
```{r}
listings <- read_csv("C:/jhui-chen/ISSS626-GAA/Hands-on_Ex/Hands-on_Ex01/data/aspatial/listings.csv")
print(listings)
```

1.8.2 Creating a simple feature data frame from an aspatial data frame
```{r}
listings_sf <- st_as_sf(listings,
                       coords = c("longitude", "latitude"),
                       crs=4326) %>%
  st_transform(crs = 3414)
glimpse(listings_sf)
```
1.9 Geoprocessing with sf package

1.9.1 Buffering
Buffering, compute 5 meter buffer around cycling path, calculating area of the buffer.
```{r}
buffer_cycling <- st_buffer(cyclingpath,
                               dist=5, nQuadSegs = 30)
buffer_cycling$AREA <- st_area(buffer_cycling)
sum(buffer_cycling$AREA)
```

1.9.2 Point-in-polygon count
Count number of pre-schools in each planning subzone
```{r}
mpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))
summary(mpsz3414$`PreSch Count`)
```

Determine the planning subzone with the most pre-schools
```{r}
top_n(mpsz3414, 1, `PreSch Count`)
```

Calculate the density of pre-school by planning subzone 
Firstly, the code chunk below uses st_area() of sf package to derive the area of each planning subzone. Next, mutate() of dplyr package is used to compute the density by using the code chunk below.

```{r}
mpsz3414$Area <- mpsz3414 %>%
  st_area()

mpsz3414 <- mpsz3414 %>%
  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)
```


1.10 Exploratory Data Analysis (EDA)

```{r}
hist(mpsz3414$`PreSch Density`)
```

```{r}
ggplot(data=mpsz3414,
       aes(x= as.numeric(`PreSch Density`)))+
  geom_histogram(bins=20,
                 color="black",
                 fill="light blue") +
  labs(title = "Are pre-school even distributed in Singapore?",
       subtitle= "There are many planning sub-zones with a single pre-school, on the other hand,\nthere are two planning subzones with at least 20 pre-schools",
       x = "Pre-school density (per km sq)",
       y = "Frequency")
```

```{r}
ggplot(data=mpsz3414,
       aes(y = `PreSch Count`,
           x= as.numeric(`PreSch Density`)))+
  geom_point(color="black",
             fill="light blue") +
  xlim(0, 40) +
  ylim(0, 40) +
  labs(title = "",
      x = "Pre-school density (per km sq)",
      y = "Pre-school count")
```

[**2 Thematic Mapping and GeoVisualisation with R**]{.underline}

2.3 Importing Data into R

2.3.2 Importing Geospatial Data into R
```{r}
mpsz = st_read(dsn = "C:/jhui-chen/ISSS626-GAA/Hands-on_Ex/Hands-on_Ex01/data/geospatial",
layer = "MP14_SUBZONE_WEB_PL")
```

```{r}
mpsz
```

2.3.3 Importing Attribute Data into R
```{r}
popdata <- read_csv("C:/jhui-chen/ISSS626-GAA/Hands-on_Ex/Hands-on_Ex01/data/aspatial/respopagesextod2011to2020.csv")
popdata
```

2.3.4 Data Preparation

2.3.4.1 Data wrangling
```{r}
popdata2020 <- popdata %>%
  filter(Time == 2020) %>%
  group_by(PA, SZ, AG) %>%
  summarise(`POP` = sum(`Pop`)) %>%
  ungroup()%>%
  pivot_wider(names_from=AG,
              values_from=POP) %>%
  mutate(YOUNG = rowSums(.[3:6])
       +rowSums(.[12])) %>%
  mutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+
  rowSums(.[13:15]))%>%
  mutate(`AGED`=rowSums(.[16:21])) %>%
  mutate(`TOTAL`=rowSums(.[3:21])) %>%
  mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)
  /`ECONOMY ACTIVE`) %>%
    select(`PA`, `SZ`, `YOUNG`,
          `ECONOMY ACTIVE`, `AGED`,
          `TOTAL`, `DEPENDENCY`)
view(popdata2020)
```

2.3.4.2 Joining the attribute data and geospatial data
```{r}
popdata2020 <- popdata2020 %>%
  mutate_at(.vars = vars(PA, SZ),
          .funs = list(toupper)) %>%
  filter(`ECONOMY ACTIVE` > 0)

mpsz_pop2020 <- left_join(mpsz, popdata2020,
                          by = c("SUBZONE_N" = "SZ"))

write_rds(mpsz_pop2020, "C:/jhui-chen/ISSS626-GAA/Hands-on_Ex/Hands-on_Ex01/data/rds/mpszpop2020.rds")

```

2.4 Choropleth Mapping Geospatial Data Using tmap

2.4.1 Plotting a choropleth map quickly by using qtm()
```{r}
tmap_mode("plot")
qtm(mpsz_pop2020,
    fill = "DEPENDENCY")
```

2.4.2 Creating a choropleth map by using tmapâ€™s elements 
```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
         style = "quantile",
         palette = "Blues",
         title = "Dependency ratio") +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone",
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45,
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha =0.2) +
   tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authority (URA)\nand Population data from Department of Statistics (DOS)",
    position = c("left", "bottom"))
```

2.4.2.1 Drawing a base map
```{r}
tm_shape(mpsz_pop2020) +
  tm_polygons()
```

2.4.2.2 Drawing a choropleth map using tm_polygons()
```{r}
tm_shape(mpsz_pop2020)+
  tm_polygons("DEPENDENCY")
```

2.4.2.3 Drawing a choropleth map using tm_fill() and *tm_border()**

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY")
```

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY") +
  tm_borders(lwd = 0.1, alpha = 1)
```

2.4.3 Data classification methods of tmap

2.4.3.1 Plotting choropleth maps with built-in classification methods
```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          n = 5,
          style = "quantile") +
tm_borders(alpha = 0.5)
```

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
         n = 5,
         style = "equal") +
  tm_borders(alpha = 0.5)
```

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
         n = 5,
         style = "equal") +
  tm_borders(alpha = 0.5)
```

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
         n = 5,
         style = "kmeans") +
  tm_borders(alpha = 0.5)
```

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
         n = 3,
         style = "kmeans") +
  tm_borders(alpha = 0.5)
```

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
         n = 5,
         style = "pretty") +
  tm_borders(alpha = 0.5)
```

2.4.3.2 Plotting choropleth map with custome break

```{r}
summary(mpsz_pop2020$DEPENDENCY)
```

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +
  tm_borders(alpha = 0.5)
```

2.4.4 Colour Scheme

2.4.4.1 Using ColourBrewer palette
```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
        n = 6,
        style = "quantile",
        palette = "Blues") +
  tm_borders(alpha = 0.5)
```

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
         style = "quantile",
         palette = "Greens") +
  tm_borders(alpha = 0.5)
```

```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
         style = "quantile",
         palette = "-Greens") +
  tm_borders(alpha = 0.5)
```

2.4.5 Map Layouts

2.4.5.1 Map Legend
```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
         style = "jenks",
         palette = "Blues",
         legend.hist = TRUE,
         legend.is.portrait = TRUE,
         legend.hist.z = 0.1) +
  tm_layout(main.title = "Distribution of Dependency Ratio by planning subzone \n(Jenks classification)",
           main.title.position = "center",
           main.title.size = 1,
           legend.height = 0.45,
           legend.width = 0.35,
           legend.outside = FALSE,
           legend.position = c("right", "bottom"),
           frame = FALSE) +
  tm_borders(alpha = 0.5)
```

2.4.5.2 Map style
```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
         style = "quantile",
         palette = "-Greens") +
  tm_borders(alpha = 0.5) +
  tmap_style("classic")
```

2.4.5.3 Cartographic Furniture
```{r}
tm_shape(mpsz_pop2020)+
  tm_fill("DEPENDENCY",
         style = "quantile",
         palette = "Blues",
         title = "No. of persons") +
  tm_layout(main.title = "Distribution of Dependency Ratio \nby planning subzone",
           main.title.position = "center",
           main.title.size = 1.2,
           legend.height = 0.45,
           legend.width = 0.35,
           frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar(width = 0.15) +
  tm_grid(lwd = 0.1, alpha = 0.2) +
  tm_credits("Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\n and Population data from Department of Statistics DOS",
           position = c("left", "bottom"))
```

Reset to default style
```{r}
tmap_style("white")
```

2.4.6 Drawing Small Multiple Choropleth Maps

2.4.6.1 By assigning multiple values to at least one of the aesthetic arguments
```{r}
tm_shape(mpsz_pop2020)+
  tm_fill(c("YOUNG", "AGED"),
         style = "equal",
         palette = "Blues") +
  tm_layout(legend.position = c("right", "bottom")) +
  tm_borders(alpha = 0.5) +
  tmap_style("white")
```

```{r}
tm_shape(mpsz_pop2020)+
  tm_polygons(c("DEPENDENCY","AGED"),
             style = c("equal", "quantile"),
             palette = list("Blues","Greens")) +
  tm_layout(legend.position = c("right", "bottom"))
```

2.4.6.2 By defining a group-by variable in tm_facets()
```{r}
tm_shape(mpsz_pop2020) +
  tm_fill("DEPENDENCY",
         style = "quantile",
         palette = "Blues",
         thres.poly = 0) +
  tm_facets(by="REGION_N",
         free.coords=TRUE,
         drop.shapes=TRUE) +
  tm_layout(legend.show = FALSE,
         title.position = c("center", "center"),
         title.size = 20) +
  tm_borders(alpha = 0.5)
```

2.4.6.3 By creating multiple stand-alone maps with tmap_arrange()
```{r}
youngmap <- tm_shape(mpsz_pop2020)+
  tm_polygons("YOUNG",
              style = "quantile",
              palette = "Blues")
agedmap <- tm_shape(mpsz_pop2020)+
  tm_polygons("AGED",
              style = "quantile",
              palette = "Blues")

tmap_arrange(youngmap, agedmap, asp=1, ncol=2)
```

2.4.7 Mapping Spatial Object Meeting a Selection Criterion
```{r}
tm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N=="CENTRAL REGION", ])+
  tm_fill("DEPENDENCY",
         style = "quantile",
         palette = "Blues",
         legend.hist = TRUE,
         legend.is.portrait = TRUE,
         legend.hist.z = 0.1) +
  tm_layout(legend.outside = TRUE,
            legend.height = 0.45,
            legend.width = 5.0,
            legend.position = c("right", "bottom"),
            frame = FALSE) +
  tm_borders(alpha = 0.5)
```