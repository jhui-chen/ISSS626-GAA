---
title: "Hands-on Exercise 2"
author: "Chen Jinghui"
date: "Aug 27 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  message: false #no warning messages go out
  freeze: true  #will not re-render all items
---

[**4 1st Order Spatial Point Patterns Analysis Methods**]{.underline}

4.3 Installing and Loading the R packages

```{r}
pacman::p_load(sf, raster, spatstat, tmap, tidyverse)
```

4.4 Spatial Data Wrangling

4.4.1 Importing the spatial data

```{r}
childcare_sf <- st_read("C:/jhui-chen/ISSS626-GAA/Hands-on_Ex/Hands-on_Ex02/data/child-care-services-geojson.geojson") %>%
st_transform(childcare_sf, crs = 3414) ##change to svy21 and epsg code to 3414

st_crs(childcare_sf) 
```

Importing the spatial data and transforming their coordinate reference system (CRS).

```{r}
sg_sf <- st_read(dsn = "C:/jhui-chen/ISSS626-GAA/Hands-on_Ex/Hands-on_Ex02/data", layer="CostalOutline")%>%
st_transform(crs = 3414)

st_crs(sg_sf)
```

```{r}
mpsz_sf <- st_read(dsn = "C:/jhui-chen/ISSS626-GAA/Hands-on_Ex/Hands-on_Ex02/data",
layer = "MP14_SUBZONE_WEB_PL")%>%
st_transform(crs = 3414)

st_crs(mpsz_sf)
```

4.4.2 Mapping the geospatial data sets

```{r}
tmap_mode("plot")
tm_shape(mpsz_sf) +                # First layer: base map (polygons)
  tm_fill(col = "gray90") +        # Fills the polygons with a light gray color
  tm_borders(col = "black", lwd = 0.5) +   # Adds borders to the polygons in black
  tm_shape(childcare_sf) +         # Second layer: points
  tm_dots(size = 0.01,             # Adds dots for points
          col = "black",           # Sets the color of dots to black
          alpha = 1) 
```

```{r}
#tmap_mode('view')
#  tm_shape(childcare_sf)+
#  tm_dots()
  
tmap_mode('plot')
  tm_shape(childcare_sf)+
  tm_dots()
  
```

4.5 Geospatial Data wrangling

4.5.1 Converting sf data frames to sp's Spatial\* class

```{r}
childcare <- as_Spatial(childcare_sf)
mpsz <- as_Spatial(mpsz_sf)
sg <- as_Spatial(sg_sf)
```

```{r}
childcare
```

```{r}
mpsz
```

```{r}
sg
```

4.5.2 Converting the Spatial\* class into generic sp format

```{r}
childcare_sp <- as(childcare, "SpatialPoints")
sg_sp <- as(sg, "SpatialPolygons")
```

```{r}
childcare_sp
```

```{r}
sg_sp
```

4.5.3 Converting the generic sp format into spatstat's ppp format

```{r}
childcare_ppp <- as.ppp(childcare_sf)
childcare_ppp
```

```{r}
plot(childcare_ppp)
```

```{r}
summary(childcare_ppp)
```

4.5.4 Handling duplicated points

```{r}
any(duplicated(childcare_ppp))
```

```{r}
multiplicity(childcare_ppp) ##count the number of co-indicence point
```

```{r}
sum(multiplicity(childcare_ppp) > 1)  #If we want to know how many locations have more than one                                           #point event
                                      #no locations have more than one point event
```

```{r}
tmap_mode('plot')
tm_shape(childcare) +
  tm_dots(alpha=0.4,
          size=0.05)
#tmap_mode('view')
#tm_shape(childcare) +
#  tm_dots(alpha=0.4,
#          size=0.05)
```

```{r}
childcare_ppp_jit <- rjitter(childcare_ppp,
                              retry=TRUE,
                              nsim=1,
                              drop=TRUE)
any(duplicated(childcare_ppp_jit))
#multiplicity(childcare_ppp_jit)
```

4.5.5 Creating owin object

```{r}
sg_owin <- as.owin(sg_sf)

plot(sg_owin)
```

```{r}
summary(sg_owin)
```

4.5.6 Combining point events object and owin object

```{r}
childcareSG_ppp = childcare_ppp[sg_owin]
summary(childcareSG_ppp)
```

```{r}
plot(childcareSG_ppp)
```

4.6 First-order Spatial Point Patterns Analysis

4.6.1 Kernel Density Estimation (KDE)

4.6.1.1 Computing kernel density estimation using automatic bandwidth selection method

```{r}
kde_childcareSG_bw <- density(childcareSG_ppp,
                              sigma=bw.diggle,
                              edge=TRUE,
                            kernel="gaussian")
plot(kde_childcareSG_bw)
```

```{r}
bw <- bw.diggle(childcareSG_ppp) #retrieve the bandwidth used to compute the kde layer
bw
```

4.6.1.2 Rescalling KDE values (convert m to km)

```{r}
childcareSG_ppp.km <- rescale.ppp(childcareSG_ppp, 1000, "km")

kde_childcareSG.bw <- density(childcareSG_ppp.km, sigma=bw.diggle, edge=TRUE, kernel="gaussian")
plot(kde_childcareSG.bw)
```

4.6.2 Working with different automatic bandwidth methods

```{r}
bw.CvL(childcareSG_ppp.km)
```

```{r}
bw.scott(childcareSG_ppp.km)
```

```{r}
bw.ppl(childcareSG_ppp.km)
```

```{r}
bw.diggle(childcareSG_ppp.km)
```

```{r}
kde_childcareSG.ppl <- density(childcareSG_ppp.km,
                               sigma=bw.ppl,
                               edge=TRUE,
                               kernel="gaussian")
par(mfrow=c(1,2))
plot(kde_childcareSG.bw, main = "bw.diggle")
plot(kde_childcareSG.ppl, main = "bw.ppl")
```

4.6.3 Working with different kernel methods

```{r}
par(mfrow=c(2,2))
plot(density(childcareSG_ppp.km,
             sigma=bw.ppl,
             edge=TRUE,
             kernel="gaussian"),
     main="Gaussian")
plot(density(childcareSG_ppp.km,
             sigma=bw.ppl,
             edge=TRUE,
             kernel="epanechnikov"),
     main="Epanechnikov")
plot(density(childcareSG_ppp.km,
             sigma=bw.ppl,
             edge=TRUE,
             kernel="quartic"),
     main="Quartic")
plot(density(childcareSG_ppp.km,
             sigma=bw.ppl,
             edge=TRUE,
             kernel="disc"),
     main="Disc")
```

4.7 Fixed and Adaptive KDE

4.7.1 Computing KDE by using fixed bandwidth

```{r}
kde_childcareSG_600 <- density(childcareSG_ppp.km, sigma=0.6, edge=TRUE,kernel="gaussian")
plot(kde_childcareSG_600)
```

4.7.2 Computing KDE by using adaptive bandwidth

```{r}
kde_childcareSG_adaptive <- adaptive.density(childcareSG_ppp.km, method="kernel")
plot(kde_childcareSG_adaptive)
```

```{r}
par(mfrow=c(1,2))
plot(kde_childcareSG.bw, main = "Fixed bandwidth")
plot(kde_childcareSG_adaptive, main = "Adaptive bandwidth")
```

4.7.3 Converting KDE output into grid object.

```{r}
gridded_kde_childcareSG_bw <- as(kde_childcareSG.bw, "SpatialGridDataFrame")
spplot(gridded_kde_childcareSG_bw)
```

```{r}
kde_childcareSG_bw_raster <- raster(kde_childcareSG.bw)
kde_childcareSG_bw_raster
```

4.7.3.2 Assigning projection systems

```{r}
projection(kde_childcareSG_bw_raster) <- CRS("+init=EPSG:3414")
kde_childcareSG_bw_raster
#plot(kde_childcareSG_bw_raster)
```

4.7.4 Visualising the output in tmap

```{r}
tm_shape(kde_childcareSG_bw_raster) +
  tm_raster("layer", palette = "viridis") +
  tm_layout(legend.position = c("right", "bottom"), frame = FALSE)
```

4.7.5 Comparing Spatial Point Patterns using KDE

4.7.5.1 Extracting study area as we need to confine the analysis within a geographical area. See 4.5.5

```{r}
pg <- mpsz_sf %>%
  filter(PLN_AREA_N == "PUNGGOL")
tm <- mpsz_sf %>%
  filter(PLN_AREA_N == "TAMPINES")
ck <- mpsz_sf %>%
  filter(PLN_AREA_N == "CHOA CHU KANG")
jw <- mpsz_sf %>%
  filter(PLN_AREA_N == "JURONG WEST")
```

```{r}
par(mfrow=c(2,2))
plot(pg, main = "Punggol")
```

```{r}
plot(tm, main = "Tampines")
```

```{r}
plot(ck, main = "Choa Chu Kang")
```

```{r}
plot(jw, main = "Jurong West")
```

4.7.5.2 Creating owin object

```{r}
pg_owin = as.owin(pg)
tm_owin = as.owin(tm)
ck_owin = as.owin(ck)
jw_owin = as.owin(jw)
```

4.7.5.3 Combining childcare points and the study area By using the code chunk below, we are able to extract childcare that is within the specific region

```{r}
childcare_pg_ppp = childcare_ppp_jit[pg_owin]
childcare_tm_ppp = childcare_ppp_jit[tm_owin]
childcare_ck_ppp = childcare_ppp_jit[ck_owin]
childcare_jw_ppp = childcare_ppp_jit[jw_owin]
```

transform the unit of measurement from metre to kilometre

```{r}
childcare_pg_ppp.km = rescale.ppp(childcare_pg_ppp, 1000, "km")
childcare_tm_ppp.km = rescale.ppp(childcare_tm_ppp, 1000, "km")
childcare_ck_ppp.km = rescale.ppp(childcare_ck_ppp, 1000, "km")
childcare_jw_ppp.km = rescale.ppp(childcare_jw_ppp, 1000, "km")
```

```{r}
par(mfrow=c(2,2))
plot(childcare_pg_ppp.km, main="Punggol")
plot(childcare_tm_ppp.km, main="Tampines")
plot(childcare_ck_ppp.km, main="Choa Chu Kang")
plot(childcare_jw_ppp.km, main="Jurong West")
```

4.7.5.4 Computing KDE

```{r}
#par(mfrow=c(2,2))
plot(density(childcare_pg_ppp.km,
             sigma=bw.diggle,
             edge=TRUE,
             kernel="gaussian"),
     main="Punggol")
plot(density(childcare_tm_ppp.km,
             sigma=bw.diggle,
             edge=TRUE,
             kernel="gaussian"),
     main="Tampines")
plot(density(childcare_ck_ppp.km,
             sigma=bw.diggle,
             edge=TRUE,
             kernel="gaussian"),
     main="Choa Chu Kang")
plot(density(childcare_jw_ppp.km,
             sigma=bw.diggle,
             edge=TRUE,
             kernel="gaussian"),
     main="Jurong West")

```

4.7.5.5 Computing fixed bandwidth KDE

```{r}
#par(mfrow=c(2,2))
             plot(density(childcare_ck_ppp.km,
             sigma=0.25,
             edge=TRUE,
             kernel="gaussian"),
    main="Choa Chu Kang")
plot(density(childcare_jw_ppp.km,
             sigma=0.25,
             edge=TRUE,
             kernel="gaussian"),
    main="Jurong West")
plot(density(childcare_pg_ppp.km,
             sigma=0.25,
             edge=TRUE,
             kernel="gaussian"),
    main="Punggol")
plot(density(childcare_tm_ppp.km,
             sigma=0.25,
             edge=TRUE,
             kernel="gaussian"),
    main="Tampines")
```

4.8 Nearest Neighbour Analysis

4.8.1 Testing spatial point patterns using Clark and Evans Test conclusion: distribution of childcare services not randomly distributed

```{r}
clarkevans.test(childcareSG_ppp,
                correction="none",
                clipregion="sg_owin",
                alternative=c("clustered"),
                nsim=99)
```

4.8.2 Clark and Evans Test: Choa Chu Kang planning area

```{r}
clarkevans.test(childcare_ck_ppp,
                correction="none",
                clipregion=NULL,
                alternative=c("two.sided"),
                nsim=999)
```

4.8.3 Clark and Evans Test: Tampines planning area

```{r}
clarkevans.test(childcare_tm_ppp,
                correction="none",
                clipregion=NULL,
                alternative=c("two.sided"),
                nsim=999)
```

4.8.3 Clark and Evans Test: Jurong West planning area

```{r}
clarkevans.test(childcare_jw_ppp,
                correction="none",
                clipregion=NULL,
                alternative=c("two.sided"),
                nsim=999)
```

4.8.3 Clark and Evans Test: Punggol planning area

```{r}
clarkevans.test(childcare_pg_ppp,
                correction="none",
                clipregion=NULL,
                alternative=c("two.sided"),
                nsim=999)
```


[**5 2nd Order Spatial Point Patterns Analysis Methods**]{.underline}

5.3 Installing and Loading the R packages
```{r}
pacman::p_load(sf, raster, spatstat, tmap, tidyverse)
```

5.4 Spatial Data Wrangling
```{r}
childcare_sf <- st_read("C:/jhui-chen/ISSS626-GAA/Hands-on_Ex/Hands-on_Ex02/data/child-care-services-geojson.geojson") %>%
st_transform(childcare_sf, crs = 3414) ##change to svy21 and epsg code to 3414

st_crs(childcare_sf) 
```

Importing the spatial data and transforming their coordinate reference system (CRS).
```{r}
sg_sf <- st_read(dsn = "C:/jhui-chen/ISSS626-GAA/Hands-on_Ex/Hands-on_Ex02/data", layer="CostalOutline")%>%
st_transform(crs = 3414)

st_crs(sg_sf)
```

```{r}
mpsz_sf <- st_read(dsn = "C:/jhui-chen/ISSS626-GAA/Hands-on_Ex/Hands-on_Ex02/data",
layer = "MP14_SUBZONE_WEB_PL")%>%
st_transform(crs = 3414)

st_crs(mpsz_sf)
```

5.4.2 Mapping the geospatial data sets
```{r}
tmap_mode("plot")
tm_shape(mpsz_sf) +                # First layer: base map (polygons)
  tm_fill(col = "gray90") +        # Fills the polygons with a light gray color
  tm_borders(col = "black", lwd = 0.5) +   # Adds borders to the polygons in black
  tm_shape(childcare_sf) +         # Second layer: points
  tm_dots(size = 0.01,             # Adds dots for points
          col = "black",           # Sets the color of dots to black
          alpha = 1) 
```

```{r}
#tmap_mode('view')
#  tm_shape(childcare_sf)+
#  tm_dots()
  
tmap_mode('plot')
  tm_shape(childcare_sf)+
  tm_dots()
```

5.5 Geospatial Data wrangling

5.5.1 Converting from sf format into spatstat’s ppp format
```{r}
childcare_ppp <- as.ppp(childcare_sf)
childcare_ppp
```

```{r}
plot(childcare_ppp)
```

```{r}
summary(childcare_ppp)
```

5.5.2 Handling duplicated points
```{r}
any(duplicated(childcare_ppp))
```


```{r}
multiplicity(childcare_ppp)
```

```{r}
sum(multiplicity(childcare_ppp) > 1)
```

```{r}
tmap_mode('plot')
tm_shape(childcare) +
  tm_dots(alpha=0.4,
          size=0.05)
#tmap_mode('view')
#tm_shape(childcare) +
#  tm_dots(alpha=0.4,
#          size=0.05)
```


```{r}
childcare_ppp_jit <- rjitter(childcare_ppp,
                             retry=TRUE,
                             nsim=1,
                             drop=TRUE)
multiplicity(childcare_ppp_jit)
sum(multiplicity(childcare_ppp) > 1)
```

```{r}
any(duplicated(childcare_ppp_jit))
```

5.5.3 Creating owin object
```{r}
sg_owin <- as.owin(sg_sf)
plot(sg_owin)
```

```{r}
summary(sg_owin)
```

5.5.4 Combining point events object and owin object
```{r}
childcareSG_ppp = childcare_ppp[sg_owin]
summary(childcareSG_ppp)
```

```{r}
plot(childcareSG_ppp)
```

5.5.4.1 Extracting study area
```{r}
pg <- mpsz_sf %>%
  filter(PLN_AREA_N == "PUNGGOL")
tm <- mpsz_sf %>%
  filter(PLN_AREA_N == "TAMPINES")
ck <- mpsz_sf %>%
  filter(PLN_AREA_N == "CHOA CHU KANG")
jw <- mpsz_sf %>%
  filter(PLN_AREA_N == "JURONG WEST")
```

plot target planning areas
```{r}
plot(pg, main = "Punggol")
```

```{r}
plot(tm, main = "Tampines")
```

```{r}
plot(ck, main = "Choa Chu Kang")
```

```{r}
plot(jw, main = "Jurong West")
```

5.5.4.2 Converting sf objects into owin objects
```{r}
pg_owin = as.owin(pg)
tm_owin = as.owin(tm)
ck_owin = as.owin(ck)
jw_owin = as.owin(jw)
```

5.5.4.3 Combining childcare points and the study area
```{r}
childcare_pg_ppp = childcare_ppp_jit[pg_owin]
childcare_tm_ppp = childcare_ppp_jit[tm_owin]
childcare_ck_ppp = childcare_ppp_jit[ck_owin]
childcare_jw_ppp = childcare_ppp_jit[jw_owin]
```

rescaling from m to km
```{r}
childcare_pg_ppp.km = rescale(childcare_pg_ppp, 1000, "km")
childcare_tm_ppp.km = rescale(childcare_tm_ppp, 1000, "km")
childcare_ck_ppp.km = rescale(childcare_ck_ppp, 1000, "km")
childcare_jw_ppp.km = rescale(childcare_jw_ppp, 1000, "km")

par(mfrow=c(2,2))
plot(childcare_pg_ppp.km, main="Punggol")
plot(childcare_tm_ppp.km, main="Tampines")
plot(childcare_ck_ppp.km, main="Choa Chu Kang")
plot(childcare_jw_ppp.km, main="Jurong West")
```

5.6 Second-order Spatial Point Patterns Analysis

5.7 Analysing Spatial Point Process Using G-Function

5.7.1 Choa Chu Kang planning area
5.7.1.1 Computing G-function estimation
```{r}
G_CK = Gest(childcare_ck_ppp, correction = "border")
plot(G_CK, xlim=c(0,500))
```

5.7.1.2 Performing Complete Spatial Randomness Test
```{r}
G_CK.csr <- envelope(childcare_ck_ppp, Gest, nsim = 999)
```

```{r}
plot(G_CK.csr)
```

5.7.2 Tampines planning area

5.7.2.1 Computing G-function estimation
```{r}
G_tm = Gest(childcare_tm_ppp, correction = "best")
plot(G_tm)
plot(childcare_tm_ppp)
```

5.7.2.2 Performing Complete Spatial Randomness Test
```{r}
G_tm.csr <- envelope(childcare_tm_ppp, Gest, correction = "all", nsim = 999)
```

```{r}
plot(G_tm.csr)
```

5.8 Analysing Spatial Point Process Using F-Function

5.8.1 Choa Chu Kang planning area

5.8.1.1 Computing F-function estimation
```{r}
F_CK = Fest(childcare_ck_ppp)
plot(F_CK)
```

5.8.2 Performing Complete Spatial Randomness Test
```{r}
F_CK.csr <- envelope(childcare_ck_ppp, Fest, nsim = 999)
```

```{r}
plot(F_CK.csr)
```

5.8.3 Tampines planning area

5.8.3.1 Computing F-function estimation
```{r}
F_tm = Fest(childcare_tm_ppp, correction = "best")
plot(F_tm)
```

5.8.3.2 Performing Complete Spatial Randomness Test
```{r}
F_tm.csr <- envelope(childcare_tm_ppp, Fest, correction = "all", nsim = 999)
```

```{r}
plot(F_tm.csr)
```

5.9 Analysing Spatial Point Process Using K-Function

5.9.1 Choa Chu Kang planning area

5.9.1.1 Computing K-function estimate
```{r}
K_ck = Kest(childcare_ck_ppp, correction = "Ripley")
plot(K_ck, . -r ~ r, ylab= "K(d)-r", xlab = "d(m)")
```

5.9.1.2 Performing Complete Spatial Randomness Test
```{r}
K_ck.csr <- envelope(childcare_ck_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)
```

```{r}
plot(K_ck.csr, . - r ~ r, xlab="d", ylab="K(d)-r")
```

5.9.2 Tampines planning area

5.9.2.1 Computing K-function estimation
```{R}
K_tm = Kest(childcare_tm_ppp, correction = "Ripley")
plot(K_tm, . -r ~ r,
     ylab= "K(d)-r", xlab = "d(m)",
     xlim=c(0,1000))
```

5.9.2.2 Performing Complete Spatial Randomness Test   
```{r}
K_tm.csr <- envelope(childcare_tm_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)
```

```{R}
plot(K_tm.csr, . - r ~ r,
     xlab="d", ylab="K(d)-r", xlim=c(0,500))
```

5.10 Analysing Spatial Point Process Using L-Function

5.10.1 Choa Chu Kang planning area

5.10.1.1 Computing L Function estimation
```{r}
L_ck = Lest(childcare_ck_ppp, correction = "Ripley")
plot(L_ck, . -r ~ r,
     ylab= "L(d)-r", xlab = "d(m)")
```

5.10.1.2 Performing Complete Spatial Randomness Test
```{r}
L_ck.csr <- envelope(childcare_ck_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)
```

```{r}
plot(L_ck.csr, . - r ~ r, xlab="d", ylab="L(d)-r")
```

5.10.2 Tampines planning area

5.10.2.1 Computing L-function estimate
```{r}
L_tm = Lest(childcare_tm_ppp, correction = "Ripley")
plot(L_tm, . -r ~ r,
     ylab= "L(d)-r", xlab = "d(m)",
     xlim=c(0,1000))
```

5.10.2.2 Performing Complete Spatial Randomness Test
```{r}
L_tm.csr <- envelope(childcare_tm_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)
```

```{r}
plot(L_tm.csr, . - r ~ r,
     xlab="d", ylab="L(d)-r", xlim=c(0,500))
```