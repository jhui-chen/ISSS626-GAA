---
title: "In-Class_Ex02"
author: "Chen Jinghui"
date: "Sep 2 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  message: false #no warning messages go out
  freeze: true  #will not re-render all items
---

```{r}
#| eval: false
install.packages("maptools", repos="https://packagemanager.posit.co/cran/2023-10-13")
```

```{r}
pacman::p_load(sf, raster, spatstat, tmap, tidyverse, maptools)
```

Importing the spatial data and transforming their coordinate reference system (CRS).

```{r}
sg_sf <- st_read(dsn = "C:/jhui-chen/ISSS626-GAA/Hands-on_Ex/Hands-on_Ex02/data", layer="CostalOutline")%>%
st_transform(crs = 3414)

st_crs(sg_sf)
```

```{r}
childcare_sf <- st_read("C:/jhui-chen/ISSS626-GAA/Hands-on_Ex/Hands-on_Ex02/data/child-care-services-geojson.geojson") %>%
st_transform(childcare_sf, crs = 3414) ##change to svy21 and epsg code to 3414

st_crs(childcare_sf) 
```

st_union() This function is to dissolve the borders and combine all the polygons (SG regions) together

as.ppp if input data is as sf object, use this. Use sf package.This function is from spatstat This create point object

```{r}
childcare_ppp <- as.ppp(childcare_sf)
childcare_ppp
```

as.owin This function is from spatstat This create boundaries for the data

```{r}

```

ppp Use this if your input data is sp object. Convert generic sp to ppp. If you can, don't use sp. involve two steps.

```{r}
sg_owin <- as.owin(sg_sf)
childcareSG_ppp = childcare_ppp[sg_owin]
```

```{r}
kde_childcareSG_bw <- density(childcareSG_ppp,
                              sigma=bw.diggle,
                              edge=TRUE,
                           kernel="gaussian")
```

Kernel density estimation this is the spatstat.geom method

```{r}
gridded_kde_childcareSG_bw <- as(kde_childcareSG_bw, "SpatialGridDataFrame")
spplot(gridded_kde_childcareSG_bw)
```

This ensure monte carlo simulation will not keep changing the values.

Set simulations to 1234, to consistently obtain values
```{r}
#set.seed(1234)
```