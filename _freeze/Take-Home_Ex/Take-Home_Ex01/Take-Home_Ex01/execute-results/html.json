{
  "hash": "e081ff32caad5203ac58b24e8efe6e9e",
  "result": {
    "markdown": "---\ntitle: \"Take-Home Ex01\"\nauthor: \"Chen Jinghui\"\ndate: \"Sep 7 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  message: false #no warning messages go out\n  freeze: true  #will not re-render all items\n---\n\n\nGeospatial Analytics for Social Good: Thailand Road Accident Case Study\n\n1.0 Installing and Loading the R packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, raster, spatstat, tmap, tidyverse, dplyr, readr, spNetwork)\n```\n:::\n\n\n2.0 Importing the spatial data\n\n2.1 Importing in Thailand road accidents in Bangkok province between 2019-2022\n\nThe code below filters out for NA and blanks in the longitude, latitude, and province columns. It also filters specifically for \"Bangkok\" province, which is the area of this study. The coordinate reference system is specified as EPSG:32647 (UTM zone 47N coordinate system), which is suitable for spatial analyses within the Bangkok region. This is because WGS84 is not ideal for precise distance and area calculations as it represents Earth as a curved surface, UTM, on the other hand, projects the Earth onto a flat plane, which reduces distortions and allows for more accurate measurements.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrdacc_sf <- read_csv(\"C:/jhui-chen/ISSS626-GAA/Take-Home_Ex/Take-Home_Ex01/data/thai_road_accident_2019_2022.csv\") %>%\n  mutate(month = month(incident_datetime)) %>%\n  mutate(monthfac = month(incident_datetime, label = TRUE, abbr = TRUE)) %>%\n  mutate(dayofweek = day(incident_datetime)) %>%\n  filter(!is.na(longitude) & longitude != \"\",   # filter out NA and blanks in longitude\n         !is.na(latitude) & latitude != \"\",     # filter out NA and blanks in latitude\n         !is.na(province_en) & province_en != \"\", # filter out NA and blanks in province\n         province_en == \"Bangkok\") %>%          # filter for province \"Bangkok\"\n  st_as_sf(coords = c(\"longitude\", \"latitude\"), crs = 4326) %>% #convert data frame into simple feature (sf). Tells R which columns are long and lat, and crs = 4326 specifies the coordinate reference system are in WGS 84. \n  st_transform(crs = 32647) #projects spatial data into the UTM zone 47N coordinate system.\n#view(rdacc_sf)\n```\n:::\n\n\nChecks on coordinate reference system.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(rdacc_sf) \n```\n:::\n\n\nHaving a look.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrdacc_sf\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(st_geometry(rdacc_sf))\n```\n:::\n\n\nGet month and day of week of the Bangkok accident\n#label = true make month factor, abbr= abbrevation\n\n::: {.cell}\n\n```{.r .cell-code}\n#rdacc_sf <- rdacc_sf %>%\n#  mutate(month = month(incident_datetime)) %>%\n#  mutate(monthfac = month(incident_datetime, label = TRUE, abbr = TRUE)) %>%\n#  mutate(dayofweek = day(incident_datetime))\n```\n:::\n\n\n2.2 Importing in Thailand road shapefile\n\nImporting the Thailand road shapefile The coordinate reference system is specified as EPSG:32647 (UTM zone 47N coordinate system), which is suitable for spatial analyses within the Bangkok region.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nroad <- st_read(dsn = \"C:/jhui-chen/ISSS626-GAA/Take-Home_Ex/Take-Home_Ex01/data\",\n                layer = \"hotosm_tha_roads_lines_shp\")\nst_crs(road) <- 4326 #Set the CRS manually to WGS 84 (EPSG:4326)\nroad <- st_transform(road, crs = 32647) #Transform the CRS to UTM zone 47N (EPSG:32647)\n```\n:::\n\n\nChecks on coordinate reference system.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(road)\n```\n:::\n\n\nHaving a look.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nroad\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#plot(road)\n```\n:::\n\n\n2.3 Importing in Thailand - Subnational Administrative Boundaries\n\nInvestigating the layers available in my local drive. The \"tha_admbnda_adm1_rtsd_20220121\" layer has 77 features, most likely being the provincial boundaries, as there are 77 provinces in Thailand and Bangkok is one of them.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngdb_layers <- st_layers(dsn = \"C:/jhui-chen/ISSS626-GAA/Take-Home_Ex/Take-Home_Ex01/data\")\nprint(gdb_layers)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nprovince <- st_read(dsn = \"C:/jhui-chen/ISSS626-GAA/Take-Home_Ex/Take-Home_Ex01/data\", layer = \"tha_admbnda_adm1_rtsd_20220121\")\nst_crs(province) <- 4326 #Set the CRS manually to WGS 84 (EPSG:4326)\nprovince <- st_transform(province, crs = 32647) #Transform the CRS to UTM zone 47N (EPSG:32647)\n```\n:::\n\n\nChecks on coordinate reference system.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(province)\n```\n:::\n\n\nHaving a look.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprovince\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbkk <- province %>%\n  filter(ADM1_EN == \"Bangkok\") # Filter for Bangkok province\n\nprint(bkk)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(st_geometry(bkk))\n```\n:::\n\n\n3.0 Geospatial Data wrangling\n\nCheck for any duplicated accidents in rdacc_sf. No duplicated accidents events.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nany(duplicated(rdacc_sf))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbkk <- st_transform(bkk, crs = st_crs(road)) # Ensure the bkk shapefile has the same CRS\nroad_bkk <- st_intersection(road, bkk) # Perform the spatial intersection to filter roads in Bangkok\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#plot(road_bkk)  ## don't run me, very long\n```\n:::\n\n\nCreate a sf object with only geometry of bkk roads\n\n\n::: {.cell}\n\n```{.r .cell-code}\nroad_bkk_geom <- st_geometry(road_bkk) #Retain only the geometry of road_bkk\nroad_bkk_geom_sf <- st_sf(geometry = road_bkk_geom) # Convert the geometry back to a simple feature object\n```\n:::\n\n\nSaving road_bkk_geom_sf\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsave_path <- \"C:/jhui-chen/ISSS626-GAA/Take-Home_Ex/Take-Home_Ex01/data/processed_data/road_bkk_geom_sf.rds\" # Specify the file path where you want to save the object\n\nsaveRDS(road_bkk_geom_sf, file = save_path) # Save the road_bkk_geom_sf object to the specified file\n```\n:::\n\n\nloading road_bkk_geom_sf back\n\n\n::: {.cell}\n\n```{.r .cell-code}\nroad_bkk_geom_sf <- readRDS(\"C:/jhui-chen/ISSS626-GAA/Take-Home_Ex/Take-Home_Ex01/data/processed_data/road_bkk_geom_sf.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(st_geometry(road_bkk_geom_sf))\n```\n:::\n\n\n4.0 Geospatial data visualisation\n\n4.1 Basic plot of BKK roads and road accidents. This plot provides an overview of the accidents on roads in BKK and serves as a check that the data has been processed correctly. Analysis: There are many roads around BKK area, but it seems that the accidents are clustered around what appears to be expressways and major roads.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(st_geometry(road_bkk_geom_sf))\nplot(rdacc_sf,add=T,col='red',pch = 19)\n```\n:::\n\n\n4.2 Interactive map of accidents in Bangkok area This plot allows for exploratory data analysis by zooming, panning and inspecting specific locations. Analysis: This helps to show that the accidents are indeed clustered around expressways and major roads.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('view')\n  tm_shape(rdacc_sf) +     # Second shape: accident points\n  tm_dots(col = \"red\", size = 0.1) +  # Visualize accident points as small red dots\n  tm_shape(bkk) +          # Third shape: Bangkok boundaries\n  tm_borders(lwd = 2)\ntmap_mode(\"plot\")\n```\n:::\n\n\n4.3 Accidents in Bangkok area over 2019-2022, separated by year This plot shows the temporarl aspect of the accidents by splitting them into yearly facets. Analysis:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrdacc_sf <- rdacc_sf %>%\n  mutate(incident_year = format(as.Date(incident_datetime), \"%Y\"))\n\ntmap_mode('plot')\n\ntm_shape(road_bkk_geom_sf) + \n  tm_lines(lwd = 0.3) +                     # \n  tm_shape(rdacc_sf) + \n  tm_dots(col = \"red\", size = 0.1) +        # Small red dots for accidents\n  tm_facets(by = \"incident_year\", nrow = 2, ncol = 2) +  # Facets by year, arranged in 2x2 grid\n  tm_layout(title = \"Accidents in Bangkok by Year\")\n```\n:::\n\n\n5.0 Network KDE (NKDE) Analysis\n\n5.1 Preparing the lixels objects Checking for unique geometry type in road_bkk_geom_sf. There are multilinestrings and linestrings\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(unique(st_geometry_type(road_bkk_geom_sf)))\n```\n:::\n\n\n5.2 Creating the lixels objects test1####\n\n\n::: {.cell}\n\n```{.r .cell-code}\nroad_bkk_lines <- st_cast(road_bkk_geom_sf, \"LINESTRING\") # Function to split MULTILINESTRING into LINESTRINGs\n\nlixels <- lixelize_lines.mc(  # Now, apply lixelize_lines.mc() to the filtered object\n  road_bkk_lines,        # Your filtered road network object\n  700,                   # Length of each lixel in meters\n  350,                   # Minimum distance between points for lixel creation\n  verbose = TRUE,        # Show progress\n  chunk_size = 100)       # Process in chunks of 100 for efficiency\n```\n:::\n\n\nCheck lixels plot test1\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(lixels, lwd = 0.3)\n```\n:::\n\n\nrun all three methods, simple, continous, and discontinous for nkde. Prof say result about the same. for the bandwidth, to try min 25m, max can 700m\n\n\n::: {.cell}\n\n:::\n\n\nspatial, temporal and spatial-temporal https://jeremygelb.github.io/spNetwork/articles/TNKDE.html#introduction\n\n5.2 Creating the lixels objects test2...This kept all the linestrings from multilinestring but plot looks really weird. Continue without using this test2\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#road_bkk_lines <- st_collection_extract(road_bkk_geom_sf, \"LINESTRING\") # Extract LINESTRING geometries from MULTILINESTRING\n\n#lixels <- lixelize_lines.mc(  # Now, apply lixelize_lines.mc() to the filtered object\n#  road_bkk_lines,        # Your filtered road network object\n#  700,                   # Length of each lixel in meters\n#  350,                   # Minimum distance between points for lixel creation\n#  verbose = TRUE,        # Show progress\n#  chunk_size = 100       # Process in chunks of 100 for efficiency\n#)\n```\n:::\n\n\nCheck lixels plot test2. Do not use\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#plot(lixels, lwd = 0.3)\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n4.1.2\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#plot(st_geometry(road))\n#plot(accidents_combined,add=T,col='red',pch = 19)\n```\n:::\n\n\n4.1.2 Accidents in Bangkok area over 2019-2022.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#tmap_mode('plot')\n\n#tm_shape(bkk) +                # Filtered accident points\n#  tm_borders(lwd = 2) +                     # Borders of Bangkok\n##  tm_fill(alpha = 0.1) +                    # Light fill for Bangkok boundaries\n#  tm_shape(rdacc_sf) + \n#  tm_dots(col = \"red\", size = 0.1)       # Small red dots for accidents\n```\n:::\n\n\n4.1.3 Accidents in Bangkok area over 2019-2022, separated by year\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#rdacc_sf <- rdacc_sf %>%\n#  mutate(incident_year = format(as.Date(incident_datetime), \"%Y\"))\n\n#tmap_mode('plot')\n\n#tm_shape(bkk) +                # Filtered accident points\n#  tm_borders(lwd = 2) +                     # Borders of Bangkok\n#  tm_fill(alpha = 0.1) +                    # Light fill for Bangkok boundaries\n#  tm_shape(rdacc_sf) + \n#  tm_dots(col = \"red\", size = 0.1) +        # Small red dots for accidents\n#  tm_facets(by = \"incident_year\", nrow = 2, ncol = 2) +  # Facets by year, arranged in 2x2 grid\n#  tm_layout(title = \"Accidents in Bangkok by Year\")\n```\n:::\n\n\n\n3.1 Combining accident point events (rdacc_sf), road polylines (road) and Bangkok province owin (bkk) #objects\n\n3.1.1 Convert Bangkok province polgyon (bkk) to spatstat object owin Creating owin object for province of Bangkok This is to set the boundary of Bangkok province.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#print(bkk)\n#summary(bkk)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#bkk\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#bkk_owin = as.owin(bkk)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#plot(bkk_owin)\n```\n:::\n\n\n3.1.2 Convert road polylines to spatstat ppp format\n\nConvert `road` to ppp objects part1 ##ran for 30 minutes##\n\n\n::: {.cell}\n\n```{.r .cell-code}\n###\n#road_coords <- st_coordinates(road) ##ran for 30 minutes##\n###\n```\n:::\n\n\nConvert `road` to ppp objects part 2 ran for another 30 minutes...\n\n\n::: {.cell}\n\n```{.r .cell-code}\n###\n#road_ppp <- ppp(x = road_coords[,1], y = road_coords[,2], window = bkk_owin) ##ran for 30 minutes##\n###\n```\n:::\n\n\n3.1.3 Convert rdacc_sf points to spatstat ppp format\n\nExtracting coordinates and temporal data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#accidents_data <- rdacc_sf %>%\n#  st_set_geometry(NULL) %>%\n#  as.data.frame()\n#accidents_coords <- st_coordinates(rdacc_sf)\n#accidents_combined <- data.frame(\n#  x = accidents_coords[,1],\n#  y = accidents_coords[,2],\n#  datetime = accidents_data$incident_datetime)\n```\n:::\n\n\nCreating the ppp object\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#accidents_ppp <- ppp(x = accidents_coords[,1], y = accidents_coords[,2], window = bkk_owin)\n```\n:::\n\n\nCheck for duplicated data. The duplicates here are because accidents happen at the same location but on different time period\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#any(duplicated(accidents_ppp))\n```\n:::\n\n\nHaving a look at how many locations have more than one point event.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#multiplicity(accidents_ppp)\n#sum(multiplicity(accidents_ppp) > 1)\n```\n:::\n\n\n4.0 Geospatial data visualisation\n\n4.1 Preliminary geospatial visualisation\n\n4.1.1 Interactive visualisation of accidents in Bangkok area\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#tmap_mode('view')\n#  tm_shape(rdacc_sf) +     # Second shape: accident points\n#  tm_dots(col = \"red\", size = 0.1) +  # Visualize accident points as small red dots\n#  tm_shape(bkk) +          # Third shape: Bangkok boundaries\n#  tm_borders(lwd = 2)\n#tmap_mode(\"plot\")\n```\n:::\n\n\n4.1.2\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#plot(st_geometry(road))\n#plot(accidents_combined,add=T,col='red',pch = 19)\n```\n:::\n\n\n4.1.2 Accidents in Bangkok area over 2019-2022.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#tmap_mode('plot')\n\n#tm_shape(bkk) +                # Filtered accident points\n#  tm_borders(lwd = 2) +                     # Borders of Bangkok\n#  tm_fill(alpha = 0.1) +                    # Light fill for Bangkok boundaries\n#  tm_shape(rdacc_sf) + \n#  tm_dots(col = \"red\", size = 0.1)       # Small red dots for accidents\n```\n:::\n\n\n4.1.3 Accidents in Bangkok area over 2019-2022, separated by year\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#rdacc_sf <- rdacc_sf %>%\n##  mutate(incident_year = format(as.Date(incident_datetime), \"%Y\"))\n\n#tmap_mode('plot')\n\n#tm_shape(bkk) +                # Filtered accident points\n#  tm_borders(lwd = 2) +                     # Borders of Bangkok\n#  tm_fill(alpha = 0.1) +                    # Light fill for Bangkok boundaries\n#  tm_shape(rdacc_sf) + \n#  tm_dots(col = \"red\", size = 0.1) +        # Small red dots for accidents\n#  tm_facets(by = \"incident_year\", nrow = 2, ncol = 2) +  # Facets by year, arranged in 2x2 grid\n#  tm_layout(title = \"Accidents in Bangkok by Year\")\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}